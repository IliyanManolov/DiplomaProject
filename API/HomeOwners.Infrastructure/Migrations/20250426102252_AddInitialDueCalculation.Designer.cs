// <auto-generated />
using System;
using HomeOwners.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeOwners.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250426102252_AddInitialDueCalculation")]
    partial class AddInitialDueCalculation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HomeOwners.Domain.Models.Address", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("ApartmentNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("apartment_number");

                    b.Property<long?>("BuildingNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("building_number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<long?>("FloorNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("floor_number");

                    b.Property<double?>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("float(9)")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("float(9)")
                        .HasColumnName("longitude");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("postal_code");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("state");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("street_address");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique()
                        .HasFilter("[PropertyId] IS NOT NULL");

                    b.ToTable("addresses", "homeowners");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.Community", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertiesCount")
                        .HasColumnType("int")
                        .HasColumnName("properties_count");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("communities", "homeowners");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.CommunityMessage", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("CommunityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CreatorId");

                    b.ToTable("community_messages", "homeowners");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.DuesCalculation", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("dues_calculations", "homeowners");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.Property", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("AddressId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("CommunityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<double?>("Dues")
                        .HasColumnType("float")
                        .HasColumnName("dues");

                    b.Property<double?>("MonthlyDues")
                        .IsRequired()
                        .HasColumnType("float")
                        .HasColumnName("monthly_dues");

                    b.Property<int>("Occupants")
                        .HasColumnType("int")
                        .HasColumnName("occupants");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("property_type");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("OwnerId");

                    b.ToTable("properties", "homeowners");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.ReferralCode", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("code");

                    b.Property<long?>("CommunityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("is_used");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("referal_codes", "homeowners");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.User", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<long?>("ReferalCodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("HomeOwner")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users", "homeowners");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.Address", b =>
                {
                    b.HasOne("HomeOwners.Domain.Models.Property", "Property")
                        .WithOne("Address")
                        .HasForeignKey("HomeOwners.Domain.Models.Address", "PropertyId");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.CommunityMessage", b =>
                {
                    b.HasOne("HomeOwners.Domain.Models.Community", "Community")
                        .WithMany("Messages")
                        .HasForeignKey("CommunityId");

                    b.HasOne("HomeOwners.Domain.Models.User", "Creator")
                        .WithMany("CreatedMessages")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Community");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.Property", b =>
                {
                    b.HasOne("HomeOwners.Domain.Models.Community", "Community")
                        .WithMany("Properties")
                        .HasForeignKey("CommunityId");

                    b.HasOne("HomeOwners.Domain.Models.User", "Owner")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Community");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.ReferralCode", b =>
                {
                    b.HasOne("HomeOwners.Domain.Models.Community", "Community")
                        .WithMany("ReferralCodes")
                        .HasForeignKey("CommunityId");

                    b.HasOne("HomeOwners.Domain.Models.User", "Creator")
                        .WithMany("CreatedReferalCodes")
                        .HasForeignKey("CreatorId");

                    b.HasOne("HomeOwners.Domain.Models.User", "User")
                        .WithOne("ReferalCode")
                        .HasForeignKey("HomeOwners.Domain.Models.ReferralCode", "UserId");

                    b.Navigation("Community");

                    b.Navigation("Creator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.Community", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Properties");

                    b.Navigation("ReferralCodes");
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.Property", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("HomeOwners.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedMessages");

                    b.Navigation("CreatedReferalCodes");

                    b.Navigation("OwnedProperties");

                    b.Navigation("ReferalCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
